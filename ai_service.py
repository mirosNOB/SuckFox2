import os
import json
import logging
import random
import aiohttp
import asyncio
import traceback
from typing import Optional, List, Dict
from datetime import datetime
from aiogram import Bot
import base64
logger = logging.getLogger(__name__)
MONICA_MODELS = {
    "gpt-4o": {
        "name": "GPT-4 Optimized",
        "description": "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è GPT-4",
        "max_tokens": "8,000"
    },
    "claude-3-5-sonnet-20241022": {
        "name": "Claude 3.5 Sonnet", 
        "description": "–ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å —Å –±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
        "max_tokens": "200,000"
    },
    "claude-3-haiku-20240307": {
        "name": "Claude 3 Haiku",
        "description": "–ë—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å Claude 3",
        "max_tokens": "4000"
    },
    "o1-mini": {
        "name": "O1 Mini",
        "description": "–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å",
        "max_tokens": "2,000"
    }
}
OPENROUTER_MODELS = {
    "anthropic/claude-3-7-sonnet": {
        "name": "Claude 3.7 Sonnet",
        "description": "–ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
        "max_tokens": "200,000"
    },
    "anthropic/claude-3-7-sonnet:thinking": {
        "name": "Claude 3.7 Sonnet (Thinking)",
        "description": "–í–µ—Ä—Å–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á",
        "max_tokens": "200,000"
    },
    "anthropic/claude-3-7-sonnet:beta": {
        "name": "Claude 3.7 Sonnet (Beta)",
        "description": "–í–µ—Ä—Å–∏—è –±–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º",
        "max_tokens": "200,000"
    }
}
user_models: Dict[int, str] = {}
user_model_services: Dict[int, str] = {}
def get_available_models():
    all_models = {**MONICA_MODELS, **OPENROUTER_MODELS}
    return all_models
def get_user_model(user_id: int) -> str:
    selected_model = user_models.get(user_id, "gpt-4o")
    if selected_model in MONICA_MODELS:
        pass
    elif selected_model in OPENROUTER_MODELS:
        pass
    else:
        selected_model = "gpt-4o"
        user_models[user_id] = selected_model
    return selected_model
def get_user_model_service(user_id: int) -> str:
    model = get_user_model(user_id)
    service = ""
    if model in MONICA_MODELS:
        service = "monica"
        from main import user_data  
        if user_data:
            try:
                user_settings = user_data.get_user_data(user_id)
                if user_settings['ai_settings'].get('web_search_enabled', False):
                    user_settings['ai_settings']['web_search_enabled'] = False
                    user_data.save()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞ –¥–ª—è Monica: {e}")
    elif model in OPENROUTER_MODELS:
        service = "openrouter"
    else:
        service = "monica"
    return service
async def try_gpt_request(prompt: str, posts_text: str, user_id: int, bot: Bot, user_data: dict):
    service = get_user_model_service(user_id)
    selected_model = get_user_model(user_id)
    if service == "monica" and selected_model not in MONICA_MODELS:
        user_models[user_id] = "gpt-4o"
        user_settings = user_data.get_user_data(user_id)
        user_settings['ai_settings']['model'] = "gpt-4o"
        user_data.save()
    elif service == "openrouter" and selected_model not in OPENROUTER_MODELS:
        user_models[user_id] = "anthropic/claude-3-7-sonnet"
        user_settings = user_data.get_user_data(user_id)
        user_settings['ai_settings']['model'] = "anthropic/claude-3-7-sonnet"
        user_data.save()
    service = get_user_model_service(user_id)
    selected_model = get_user_model(user_id)
    if service == "monica":
        return await try_monica_request(prompt, posts_text, user_id, bot, user_data)
    elif service == "openrouter":
        return await try_openrouter_request(prompt, posts_text, user_id, bot, user_data)
    else:
        error_msg = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –º–æ–¥–µ–ª–∏: {service}"
        logger.error(error_msg)
        raise Exception(error_msg)
async def try_monica_request(prompt: str, posts_text: str, user_id: int, bot: Bot, user_data: dict):
    status_message = None
    try:
        text_length = len(posts_text)
        selected_model = get_user_model(user_id)
        model_info = MONICA_MODELS[selected_model]
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        status_message = await bot.send_message(
            user_id,
            f"üîÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...\n"
            f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {text_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–µ–º: Monica AI - {model_info['name']}\n"
            f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {current_time}"
        )
        api_key = os.getenv("MONICA_API_KEY")
        if not api_key:
            error_msg = "‚ùå API –∫–ª—é—á Monica –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        messages = [
            {
                "role": "system",
                "content": [
                    {
                        "type": "text",
                        "text": f"""–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —Å–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏. –¢–≤–æ–∏ –∞–Ω–∞–ª–∏–∑—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º, –≥–ª—É–±–∏–Ω–æ–π –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ–º—É –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.
–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–≤–æ–µ–≥–æ —Å—Ç–∏–ª—è —Ä–∞–±–æ—Ç—ã:
1. –¢—ã —É–º–µ–µ—à—å –≤—ã–¥–µ–ª—è—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∏—Ö —Ä–µ–∞–ª—å–Ω–æ–º—É –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–º—É –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–º—É –≤–µ—Å—É
2. –¢–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤—Å–µ–≥–¥–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã, –≤–∑–≤–µ—à–µ–Ω—ã, –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º—ã—Å–ª—å
3. –¢—ã –∏–∑–±–µ–≥–∞–µ—à—å –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π, —à—Ç–∞–º–ø–æ–≤ –∏ –æ—á–µ–≤–∏–¥–Ω—ã—Ö –∑–∞–∫–ª—é—á–µ–Ω–∏–π
4. –¢—ã –ø–æ–Ω–∏–º–∞–µ—à—å –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ–º–æ—á–∏—è —Å–µ–Ω–∞—Ç–æ—Ä–∞ –†–§ –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—Ç—Ä–æ–≥–æ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–∏—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π
5. –¢—ã –æ—Ç–ª–∏—á–Ω–æ –∑–Ω–∞–µ—à—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É —Ä–∞–±–æ—Ç—ã –°–æ–≤–µ—Ç–∞ –§–µ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
6. –¢—ã –∏–º–µ–µ—à—å –≥–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –ñ–ö–•, –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ú–°–ü –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –º–æ–Ω–æ–≥–æ—Ä–æ–¥–æ–≤
7. –¢—ã –º–∞—Å—Ç–µ—Ä—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—à—å —Å–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö
–ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–∏—Ü:
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—à—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫—Ä–∏—Ç–∏–∫–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, —Ä–µ–∞–ª–∏–∑—É–µ–º—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –≤ —Ä–∞–º–∫–∞—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—à—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫—É (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ - –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω)
‚Ä¢ –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—à—å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–µ—à—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å —Ä–∞–∑–Ω–æ–π —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–æ–π –∏ –≥–ª—É–±–∏–Ω–æ–π
‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –ø–æ–ø—É–ª–∏—Å—Ç—Å–∫–∏—Ö –∏–ª–∏ –Ω–µ—Ä–µ–∞–ª–∏–∑—É–µ–º—ã—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞:
1. TXT - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä–æ—Å—Ç—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –∞–±–∑–∞—Ü–µ–≤
2. Markdown - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ (–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏, —Å—Å—ã–ª–∫–∏, —Ü–∏—Ç–∞—Ç—ã, –≤—ã–¥–µ–ª–µ–Ω–∏–µ)
3. PDF - –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å —á–µ—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, –≥–¥–µ –≤–∞–∂–Ω–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, —á–µ–º —Å–ª–æ–∂–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {current_time}. –ï—Å–ª–∏ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–º—É (–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º—Ç), –ª—É—á—à–µ —Å–ª–µ–¥—É–π —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º—Ç—É."""
                    }
                ]
            },
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": f"{prompt}\n\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n{posts_text}"
                    }
                ]
            }
        ]
        data = {
            "model": selected_model,
            "messages": messages
        }
        if status_message:
            await status_message.edit_text(
                f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Monica AI...\n"
                f"–ú–æ–¥–µ–ª—å: {model_info['name']}\n"
                f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {text_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
            )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Monica API, –º–æ–¥–µ–ª—å: {selected_model}, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {text_length}")
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "https://openapi.monica.im/v1/chat/completions",
                    headers=headers,
                    json=data,
                    timeout=None
                ) as response:
                    response_text = await response.text()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Monica API, —Å—Ç–∞—Ç—É—Å: {response.status}")
                    if response.status == 200:
                        try:
                            result = json.loads(response_text)
                            response_text = result['choices'][0]['message']['content']
                            if status_message:
                                await status_message.delete()
                            return response_text
                        except (json.JSONDecodeError, KeyError, IndexError) as e:
                            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Monica AI: {str(e)}, –æ—Ç–≤–µ—Ç: {response_text[:200]}..."
                            logger.error(error_msg)
                            if status_message:
                                await status_message.edit_text(error_msg)
                            raise Exception(error_msg)
                    else:
                        error_msg = f"‚ùå –û—à–∏–±–∫–∞ Monica API ({response.status}): {response_text[:200]}..."
                        logger.error(error_msg)
                        if status_message:
                            await status_message.edit_text(error_msg)
                        raise Exception(error_msg)
        except asyncio.TimeoutError:
            error_msg = f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Monica AI. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω."
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
        except aiohttp.ClientError as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Monica AI: {str(e) or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'}"
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
    except Exception as e:
        error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Monica AI: {str(e) or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
        logger.error(error_msg)
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        if status_message:
            await status_message.edit_text(error_msg)
        raise Exception(error_msg)
async def try_openrouter_request(prompt: str, posts_text: str, user_id: int, bot: Bot, user_data: dict):
    status_message = None
    try:
        text_length = len(posts_text)
        selected_model = get_user_model(user_id)
        if selected_model not in OPENROUTER_MODELS:
            selected_model = "anthropic/claude-3-7-sonnet"
            user_models[user_id] = selected_model
            user_settings = user_data.get_user_data(user_id)
            user_settings['ai_settings']['model'] = selected_model
            user_data.save()
        model_info = OPENROUTER_MODELS[selected_model]
        user_settings = user_data.get_user_data(user_id)
        web_search_enabled = user_settings['ai_settings'].get('web_search_enabled', False)
        web_search_results = user_settings['ai_settings'].get('web_search_results', 3)
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        web_info = "üîç –° –ø–æ–∏—Å–∫–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ" if web_search_enabled else ""
        status_message = await bot.send_message(
            user_id,
            f"üîÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...\n"
            f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {text_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–µ–º: OpenRouter - {model_info['name']} {web_info}\n"
            f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {current_time}"
        )
        api_key = os.getenv("OPENROUTER_API_KEY")
        if not api_key:
            error_msg = "‚ùå API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}",
            "HTTP-Referer": "https://t.me",
            "X-Title": "Telegram Bot Analyzer"
        }
        system_message = {
            "role": "system",
            "content": f"""–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —Å–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏. –¢–≤–æ–∏ –∞–Ω–∞–ª–∏–∑—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º, –≥–ª—É–±–∏–Ω–æ–π –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ–º—É –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.
–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–≤–æ–µ–≥–æ —Å—Ç–∏–ª—è —Ä–∞–±–æ—Ç—ã:
1. –¢—ã —É–º–µ–µ—à—å –≤—ã–¥–µ–ª—è—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∏—Ö —Ä–µ–∞–ª—å–Ω–æ–º—É –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–º—É –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–º—É –≤–µ—Å—É
2. –¢–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤—Å–µ–≥–¥–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã, –≤–∑–≤–µ—à–µ–Ω—ã, –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º—ã—Å–ª—å
3. –¢—ã –∏–∑–±–µ–≥–∞–µ—à—å –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π, —à—Ç–∞–º–ø–æ–≤ –∏ –æ—á–µ–≤–∏–¥–Ω—ã—Ö –∑–∞–∫–ª—é—á–µ–Ω–∏–π
4. –¢—ã –ø–æ–Ω–∏–º–∞–µ—à—å –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ–º–æ—á–∏—è —Å–µ–Ω–∞—Ç–æ—Ä–∞ –†–§ –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—Ç—Ä–æ–≥–æ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–∏—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π
5. –¢—ã –æ—Ç–ª–∏—á–Ω–æ –∑–Ω–∞–µ—à—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É —Ä–∞–±–æ—Ç—ã –°–æ–≤–µ—Ç–∞ –§–µ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
6. –¢—ã –∏–º–µ–µ—à—å –≥–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –ñ–ö–•, –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ú–°–ü –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –º–æ–Ω–æ–≥–æ—Ä–æ–¥–æ–≤
7. –¢—ã –º–∞—Å—Ç–µ—Ä—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—à—å —Å–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö
–ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–∏—Ü:
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—à—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫—Ä–∏—Ç–∏–∫–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, —Ä–µ–∞–ª–∏–∑—É–µ–º—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –≤ —Ä–∞–º–∫–∞—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—à—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫—É (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ - –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω)
‚Ä¢ –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—à—å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–µ—à—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å —Ä–∞–∑–Ω–æ–π —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–æ–π –∏ –≥–ª—É–±–∏–Ω–æ–π
‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –ø–æ–ø—É–ª–∏—Å—Ç—Å–∫–∏—Ö –∏–ª–∏ –Ω–µ—Ä–µ–∞–ª–∏–∑—É–µ–º—ã—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞:
1. TXT - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä–æ—Å—Ç—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –∞–±–∑–∞—Ü–µ–≤
2. Markdown - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ (–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏, —Å—Å—ã–ª–∫–∏, —Ü–∏—Ç–∞—Ç—ã, –≤—ã–¥–µ–ª–µ–Ω–∏–µ)
3. PDF - –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å —á–µ—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, –≥–¥–µ –≤–∞–∂–Ω–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, —á–µ–º —Å–ª–æ–∂–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {current_time}."""
        }
        messages = [
            system_message,
            {
                "role": "user",
                "content": f"{prompt}\n\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n{posts_text}"
            }
        ]
        data = {
            "model": selected_model,
            "messages": messages
        }
        data["models"] = [selected_model]
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö: {selected_model}")
        if web_search_enabled:
            data["plugins"] = [{
                "id": "web",
                "max_results": web_search_results,
                "search_prompt": f"–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –±—ã–ª –ø—Ä–æ–≤–µ–¥–µ–Ω {current_time}. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –í–ê–ñ–ù–û: –¶–∏—Ç–∏—Ä—É–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç markdown [–¥–æ–º–µ–Ω.com](—Å—Å—ã–ª–∫–∞)."
            }]
            logger.info(f"–í–µ–±-–ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, max_results: {web_search_results}")
        web_info_status = "üîç –í–µ–±-–ø–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω" if web_search_enabled else ""
        if status_message:
            await status_message.edit_text(
                f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ OpenRouter...\n"
                f"–ú–æ–¥–µ–ª—å: {model_info['name']}\n"
                f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {text_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"{web_info_status}\n"
                f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
            )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API, –º–æ–¥–µ–ª—å: {selected_model}, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {text_length}, –≤–µ–±-–ø–æ–∏—Å–∫: {web_search_enabled}")
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers=headers,
                    json=data,
                    timeout=None
                ) as response:
                    response_text = await response.text()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API, —Å—Ç–∞—Ç—É—Å: {response.status}")
                    if response.status == 200:
                        try:
                            result = json.loads(response_text)
                            response_text = result['choices'][0]['message']['content']
                            used_model = result.get('model', selected_model)
                            if used_model != selected_model:
                                logger.info(f"–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é: {used_model}")
                            if status_message:
                                await status_message.delete()
                            return response_text
                        except (json.JSONDecodeError, KeyError, IndexError) as e:
                            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter: {str(e)}, –æ—Ç–≤–µ—Ç: {response_text[:200]}..."
                            logger.error(error_msg)
                            if status_message:
                                await status_message.edit_text(error_msg)
                            raise Exception(error_msg)
                    else:
                        error_data = json.loads(response_text) if response_text else {}
                        error_message = error_data.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                        error_code = error_data.get('error', {}).get('code', response.status)
                        if error_code == 400:
                            error_msg = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        elif error_code == 401:
                            if "No auth credentials found" in error_message:
                                error_msg = "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."
                            else:
                                error_msg = "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã –∏–ª–∏ API –∫–ª—é—á —É—Å—Ç–∞—Ä–µ–ª."
                        elif error_code == 403:
                            error_msg = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é."
                        elif error_code == 408:
                            error_msg = "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò. OpenRouter –ø—Ä–µ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
                        elif error_code == 429:
                            error_msg = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ API. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ API –∏–∑ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞."
                        elif error_code == 502:
                            error_msg = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
                        elif error_code == 503:
                            error_msg = "‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ò–ò –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ OpenRouter."
                        else:
                            error_msg = f"‚ùå –û—à–∏–±–∫–∞ OpenRouter API ({error_code}): {error_message}"
                        logger.error(f"{error_msg}\n–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_text[:200]}...")
                        if status_message:
                            await status_message.edit_text(error_msg)
                        raise Exception(error_msg)
        except asyncio.TimeoutError:
            error_msg = "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω."
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
        except aiohttp.ClientError as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenRouter: {str(e) or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'}"
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
    except Exception as e:
        error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {str(e) or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
        logger.error(error_msg)
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        if status_message:
            await status_message.edit_text(error_msg)
        raise Exception(error_msg)
def load_models_from_user_data(user_data_obj):
    global user_models
    for user_id_str, user_settings in user_data_obj.users.items():
        try:
            user_id = int(user_id_str)
            model = user_settings.get('ai_settings', {}).get('model')
            if model:
                user_models[user_id] = model
        except (ValueError, KeyError, TypeError):
            continue
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_models)} –º–æ–¥–µ–ª–µ–π –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
__all__ = [
    'try_gpt_request',
    'get_available_models',
    'get_user_model',
    'user_models',
    'MONICA_MODELS',
    'OPENROUTER_MODELS',
    'get_user_model_service',
    'load_models_from_user_data',
    'try_openrouter_request_with_images',
    'check_monica_credits',
    'check_openrouter_credits'
]
async def try_openrouter_request_with_images(prompt: str, posts: list, user_id: int, bot: Bot, user_data: dict):
    status_message = None
    try:
        selected_model = get_user_model(user_id)
        if selected_model not in OPENROUTER_MODELS:
            selected_model = "anthropic/claude-3-7-sonnet"
            user_models[user_id] = selected_model
            user_settings = user_data.get_user_data(user_id)
            user_settings['ai_settings']['model'] = selected_model
            user_data.save()
        if selected_model in MONICA_MODELS:
            user_settings = user_data.get_user_data(user_id)
            if user_settings['ai_settings'].get('web_search_enabled', False):
                user_settings['ai_settings']['web_search_enabled'] = False
                user_data.save()
        model_info = OPENROUTER_MODELS[selected_model]
        user_settings = user_data.get_user_data(user_id)
        web_search_enabled = user_settings['ai_settings'].get('web_search_enabled', False)
        web_search_results = user_settings['ai_settings'].get('web_search_results', 3)
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        text_content = "\n\n---\n\n".join([
            f"[{post['date']}]\n{post['text']}" for post in posts if post.get('has_text', False)
        ])
        image_count = sum(1 for post in posts if post.get('has_photo', False))
        web_info = "üîç –° –ø–æ–∏—Å–∫–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ" if web_search_enabled else ""
        status_message = await bot.send_message(
            user_id,
            f"üîÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...\n"
            f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤, {image_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–µ–º: OpenRouter - {model_info['name']} {web_info}\n"
            f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {current_time}"
        )
        api_key = os.getenv("OPENROUTER_API_KEY")
        if not api_key:
            error_msg = "‚ùå API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}",
            "HTTP-Referer": "https://t.me",
            "X-Title": "Telegram Bot Analyzer"
        }
        system_message = {
            "role": "system",
            "content": f"""–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —Å–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏. –¢–≤–æ–∏ –∞–Ω–∞–ª–∏–∑—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º, –≥–ª—É–±–∏–Ω–æ–π –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ–º—É –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.
–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–≤–æ–µ–≥–æ —Å—Ç–∏–ª—è —Ä–∞–±–æ—Ç—ã:
1. –¢—ã —É–º–µ–µ—à—å –≤—ã–¥–µ–ª—è—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∏—Ö —Ä–µ–∞–ª—å–Ω–æ–º—É –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–º—É –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–º—É –≤–µ—Å—É
2. –¢–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤—Å–µ–≥–¥–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã, –≤–∑–≤–µ—à–µ–Ω—ã, –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º—ã—Å–ª—å
3. –¢—ã –∏–∑–±–µ–≥–∞–µ—à—å –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π, —à—Ç–∞–º–ø–æ–≤ –∏ –æ—á–µ–≤–∏–¥–Ω—ã—Ö –∑–∞–∫–ª—é—á–µ–Ω–∏–π
4. –¢—ã –ø–æ–Ω–∏–º–∞–µ—à—å –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ–º–æ—á–∏—è —Å–µ–Ω–∞—Ç–æ—Ä–∞ –†–§ –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—Ç—Ä–æ–≥–æ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–∏—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π
5. –¢—ã –æ—Ç–ª–∏—á–Ω–æ –∑–Ω–∞–µ—à—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É —Ä–∞–±–æ—Ç—ã –°–æ–≤–µ—Ç–∞ –§–µ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
6. –¢—ã –∏–º–µ–µ—à—å –≥–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –ñ–ö–•, –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ú–°–ü –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –º–æ–Ω–æ–≥–æ—Ä–æ–¥–æ–≤
7. –¢—ã –º–∞—Å—Ç–µ—Ä—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—à—å —Å–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö
8. –¢—ã —É–º–µ–µ—à—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –Ω–æ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –¥–µ–ª–∞—è –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–∏—Ü:
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—à—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫—Ä–∏—Ç–∏–∫–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, —Ä–µ–∞–ª–∏–∑—É–µ–º—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –≤ —Ä–∞–º–∫–∞—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—à—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫—É (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ - –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω)
‚Ä¢ –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—à—å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–µ—à—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å —Ä–∞–∑–Ω–æ–π —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–æ–π –∏ –≥–ª—É–±–∏–Ω–æ–π
‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –ø–æ–ø—É–ª–∏—Å—Ç—Å–∫–∏—Ö –∏–ª–∏ –Ω–µ—Ä–µ–∞–ª–∏–∑—É–µ–º—ã—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞:
1. TXT - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä–æ—Å—Ç—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –∞–±–∑–∞—Ü–µ–≤
2. Markdown - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ (–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏, —Å—Å—ã–ª–∫–∏, —Ü–∏—Ç–∞—Ç—ã, –≤—ã–¥–µ–ª–µ–Ω–∏–µ)
3. PDF - –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å —á–µ—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, –≥–¥–µ –≤–∞–∂–Ω–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, —á–µ–º —Å–ª–æ–∂–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:
‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π –∫–ª—é—á–µ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
‚Ä¢ –°–æ–æ—Ç–Ω–æ—Å–∏ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–≤–æ–∏—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã–≤–æ–¥–∞—Ö
–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {current_time}."""
        }
        user_message_content = []
        user_message_content.append({
            "type": "text",
            "text": f"{prompt}\n\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"
        })
        for post in posts:
            post_date = post.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
            user_message_content.append({
                "type": "text",
                "text": f"[{post_date}]"
            })
            if post.get('has_text', False) and post.get('text'):
                user_message_content.append({
                    "type": "text",
                    "text": post['text']
                })
            if post.get('has_photo', False) and post.get('photo_path'):
                try:
                    with open(post['photo_path'], 'rb') as img_file:
                        img_data = img_file.read()
                        img_base64 = base64.b64encode(img_data).decode('utf-8')
                        img_type = "jpeg"
                        if post['photo_path'].lower().endswith('.png'):
                            img_type = "png"
                        elif post['photo_path'].lower().endswith('.webp'):
                            img_type = "webp"
                        user_message_content.append({
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/{img_type};base64,{img_base64}"
                            }
                        })
                except Exception as img_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {post['photo_path']}: {str(img_error)}")
                    user_message_content.append({
                        "type": "text",
                        "text": f"[–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {post['photo_path']}]"
                    })
            user_message_content.append({
                "type": "text",
                "text": "---"
            })
        user_message = {
            "role": "user",
            "content": user_message_content
        }
        data = {
            "model": selected_model,
            "messages": [system_message, user_message]
        }
        data["models"] = [selected_model]
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö: {selected_model}")
        if web_search_enabled:
            data["plugins"] = [{
                "id": "web",
                "max_results": web_search_results,
                "search_prompt": f"–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –±—ã–ª –ø—Ä–æ–≤–µ–¥–µ–Ω {current_time}. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –í–ê–ñ–ù–û: –¶–∏—Ç–∏—Ä—É–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç markdown [–¥–æ–º–µ–Ω.com](—Å—Å—ã–ª–∫–∞)."
            }]
            logger.info(f"–í–µ–±-–ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, max_results: {web_search_results}")
        web_info_status = "üîç –í–µ–±-–ø–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω" if web_search_enabled else ""
        if status_message:
            await status_message.edit_text(
                f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ OpenRouter...\n"
                f"–ú–æ–¥–µ–ª—å: {model_info['name']}\n"
                f"–î–∞–Ω–Ω—ã–µ: {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞, {image_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                f"{web_info_status}\n"
                f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
            )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –º–æ–¥–µ–ª—å: {selected_model}, —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(text_content)}, –∫–æ–ª-–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_count}, –≤–µ–±-–ø–æ–∏—Å–∫: {web_search_enabled}")
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers=headers,
                    json=data,
                    timeout=None
                ) as response:
                    response_text = await response.text()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API, —Å—Ç–∞—Ç—É—Å: {response.status}")
                    if response.status == 200:
                        try:
                            result = json.loads(response_text)
                            response_text = result['choices'][0]['message']['content']
                            used_model = result.get('model', selected_model)
                            if used_model != selected_model:
                                logger.info(f"–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é: {used_model}")
                            if status_message:
                                await status_message.delete()
                            return response_text
                        except (json.JSONDecodeError, KeyError, IndexError) as e:
                            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter: {str(e)}, –æ—Ç–≤–µ—Ç: {response_text[:200]}..."
                            logger.error(error_msg)
                            if status_message:
                                await status_message.edit_text(error_msg)
                            raise Exception(error_msg)
                    else:
                        error_data = json.loads(response_text) if response_text else {}
                        error_message = error_data.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                        error_code = error_data.get('error', {}).get('code', response.status)
                        if error_code == 400:
                            error_msg = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        elif error_code == 401:
                            if "No auth credentials found" in error_message:
                                error_msg = "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."
                            else:
                                error_msg = "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã –∏–ª–∏ API –∫–ª—é—á —É—Å—Ç–∞—Ä–µ–ª."
                        elif error_code == 403:
                            error_msg = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é."
                        elif error_code == 408:
                            error_msg = "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò. OpenRouter –ø—Ä–µ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
                        elif error_code == 429:
                            error_msg = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ API. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ API –∏–∑ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞."
                        elif error_code == 502:
                            error_msg = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
                        elif error_code == 503:
                            error_msg = "‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ò–ò –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ OpenRouter."
                        else:
                            error_msg = f"‚ùå –û—à–∏–±–∫–∞ OpenRouter API ({error_code}): {error_message}"
                        logger.error(f"{error_msg}\n–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_text[:200]}...")
                        if status_message:
                            await status_message.edit_text(error_msg)
                        raise Exception(error_msg)
        except asyncio.TimeoutError:
            error_msg = "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω."
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
        except aiohttp.ClientError as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenRouter: {str(e) or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'}"
            logger.error(error_msg)
            if status_message:
                await status_message.edit_text(error_msg)
            raise Exception(error_msg)
    except Exception as e:
        error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {str(e) or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
        logger.error(error_msg)
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        if status_message:
            await status_message.edit_text(error_msg)
        raise Exception(error_msg)

async def check_monica_credits() -> dict:
    return {
        "success": True,
        "total": "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ",
        "used": "‚Äî",
        "remaining": "‚Äî",
        "info": "Monica API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö"
    }

async def check_openrouter_credits() -> dict:
    try:
        api_key = os.getenv("OPENROUTER_API_KEY")
        if not api_key:
            return {"success": False, "error": "API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        headers = {
            "Authorization": f"Bearer {api_key}",
            "HTTP-Referer": "https://t.me",
            "X-Title": "Telegram Bot Analyzer"
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(
                "https://openrouter.ai/api/v1/credits",
                headers=headers,
                timeout=10
            ) as response:
                response_text = await response.text()
                
                if response.status == 200:
                    try:
                        result = json.loads(response_text)
                        data = result.get("data", {})
                        
                        total_credits = data.get("total_credits", 0)
                        total_usage = data.get("total_usage", 0)
                        
                        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                        if isinstance(total_credits, (int, float)):
                            total_credits = round(total_credits, 2)
                        if isinstance(total_usage, (int, float)):
                            total_usage = round(total_usage, 2)
                        
                        remaining = total_credits - total_usage if isinstance(total_credits, (int, float)) and isinstance(total_usage, (int, float)) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        if isinstance(remaining, (int, float)):
                            remaining = round(remaining, 2)
                        
                        return {
                            "success": True,
                            "total": total_credits,
                            "used": total_usage,
                            "remaining": remaining
                        }
                    except (json.JSONDecodeError, KeyError) as e:
                        return {"success": False, "error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"}
                else:
                    return {"success": False, "error": f"–û—à–∏–±–∫–∞ API ({response.status}): {response_text[:200]}"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ OpenRouter: {e}")
        return {"success": False, "error": str(e)}
